"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1374],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),u=a,g=d["".concat(l,".").concat(u)]||d[u]||f[u]||o;return t?i.createElement(g,r(r({ref:n},p),{},{components:t})):i.createElement(g,r({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3161:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=t(7462),a=(t(7294),t(3905));const o={title:"Spring\u6838\u5fc3-IoC-\u521d\u59cb\u5316\u8fc7\u7a0b",slug:"ioc-instantiation",sidebar_position:3,keywords:["Spring"],tags:["Spring"],draft:!1,hide_table_of_contents:!1,last_update:{date:"2023-05-15 23:34",author:"Hans"}},r=void 0,s={unversionedId:"spring/Spring\u6838\u5fc3-IoC-\u521d\u59cb\u5316\u8fc7\u7a0b",id:"spring/Spring\u6838\u5fc3-IoC-\u521d\u59cb\u5316\u8fc7\u7a0b",title:"Spring\u6838\u5fc3-IoC-\u521d\u59cb\u5316\u8fc7\u7a0b",description:"\u672c\u6587\u7684\u76ee\u6807\u5c31\u662f\u5206\u6790Spring\u5982\u4f55\u5b9e\u73b0\u5c06\u8d44\u6e90\u914d\u7f6e\uff08\u4ee5xml\u914d\u7f6e\u4e3a\u4f8b\uff09\u901a\u8fc7\u52a0\u8f7d\uff0c\u89e3\u6790\uff0c\u751f\u6210BeanDefination\u5e76\u6ce8\u518c\u5230IoC\u5bb9\u5668\u4e2d\u7684\u3002",source:"@site/docs/04.spring/03.Spring\u6838\u5fc3-IoC-\u521d\u59cb\u5316\u8fc7\u7a0b.md",sourceDirName:"04.spring",slug:"/spring/ioc-instantiation",permalink:"/docs/spring/ioc-instantiation",draft:!1,tags:[{label:"Spring",permalink:"/docs/tags/spring"}],version:"current",lastUpdatedBy:"Hans",lastUpdatedAt:1684164840,formattedLastUpdatedAt:"2023\u5e745\u670815\u65e5",sidebarPosition:3,frontMatter:{title:"Spring\u6838\u5fc3-IoC-\u521d\u59cb\u5316\u8fc7\u7a0b",slug:"ioc-instantiation",sidebar_position:3,keywords:["Spring"],tags:["Spring"],draft:!1,hide_table_of_contents:!1,last_update:{date:"2023-05-15 23:34",author:"Hans"}},sidebar:"tutorialSidebar",previous:{title:"Spring\u6838\u5fc3-IoC-\u7406\u89e3\u3001\u4f53\u7cfb\u7ed3\u6784",permalink:"/docs/spring/ioc-arch"},next:{title:"Spring\u6838\u5fc3-IoC-Bean\u5b9e\u4f8b\u5316\u3001Bean\u751f\u547d\u5468\u671f\u3001\u5faa\u73af\u4f9d\u8d56",permalink:"/docs/spring/bean-lifecycle"}},l={},c=[{value:"Spring \u5bb9\u5668\u521d\u59cb\u5316\u8fc7\u7a0b",id:"spring-\u5bb9\u5668\u521d\u59cb\u5316\u8fc7\u7a0b",level:2},{value:"\u521d\u59cb\u5316\u5165\u53e3",id:"\u521d\u59cb\u5316\u5165\u53e3",level:3},{value:"\u8bbe\u7f6e\u8d44\u6e90\u89e3\u6790\u5668\u548c\u73af\u5883",id:"\u8bbe\u7f6e\u8d44\u6e90\u89e3\u6790\u5668\u548c\u73af\u5883",level:3},{value:"\u8bbe\u7f6e\u914d\u7f6e\u8def\u5f84",id:"\u8bbe\u7f6e\u914d\u7f6e\u8def\u5f84",level:3},{value:"\u521d\u59cb\u5316\u7684\u4e3b\u6d41\u7a0b",id:"\u521d\u59cb\u5316\u7684\u4e3b\u6d41\u7a0b",level:3},{value:"\u521d\u59cb\u5316 BeanFactory \u4e4b obtainFreshBeanFactory",id:"\u521d\u59cb\u5316-beanfactory-\u4e4b-obtainfreshbeanfactory",level:4},{value:"\u521d\u59cb\u5316BeanFactory\u4e4bloadBeanDefinitions",id:"\u521d\u59cb\u5316beanfactory\u4e4bloadbeandefinitions",level:4},{value:"AbstractBeanDefinitionReader\u8bfb\u53d6Bean\u5b9a\u4e49\u8d44\u6e90",id:"abstractbeandefinitionreader\u8bfb\u53d6bean\u5b9a\u4e49\u8d44\u6e90",level:4},{value:"XmlBeanDefinitionReader\u52a0\u8f7dBean\u5b9a\u4e49\u8d44\u6e90",id:"xmlbeandefinitionreader\u52a0\u8f7dbean\u5b9a\u4e49\u8d44\u6e90",level:4},{value:"XmlBeanDefinitionReader\u89e3\u6790\u8f7d\u5165\u7684Bean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6",id:"xmlbeandefinitionreader\u89e3\u6790\u8f7d\u5165\u7684bean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6",level:4},{value:"\u89e3\u6790\u8fc7\u540e\u7684BeanDefinition\u5728IoC\u5bb9\u5668\u4e2d\u7684\u6ce8\u518c",id:"\u89e3\u6790\u8fc7\u540e\u7684beandefinition\u5728ioc\u5bb9\u5668\u4e2d\u7684\u6ce8\u518c",level:4},{value:"DefaultListableBeanFactory\u5411IoC\u5bb9\u5668\u6ce8\u518c\u89e3\u6790\u540e\u7684BeanDefinition",id:"defaultlistablebeanfactory\u5411ioc\u5bb9\u5668\u6ce8\u518c\u89e3\u6790\u540e\u7684beandefinition",level:4},{value:"Spring \u5bb9\u5668\u521d\u59cb\u5316\u603b\u7ed3",id:"spring-\u5bb9\u5668\u521d\u59cb\u5316\u603b\u7ed3",level:2}],p={toc:c};function f(e){let{components:n,...o}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u672c\u6587\u7684\u76ee\u6807\u5c31\u662f\u5206\u6790Spring\u5982\u4f55\u5b9e\u73b0\u5c06\u8d44\u6e90\u914d\u7f6e\uff08\u4ee5xml\u914d\u7f6e\u4e3a\u4f8b\uff09\u901a\u8fc7\u52a0\u8f7d\uff0c\u89e3\u6790\uff0c\u751f\u6210BeanDefination\u5e76\u6ce8\u518c\u5230IoC\u5bb9\u5668\u4e2d\u7684\u3002"),(0,a.kt)("h2",{id:"spring-\u5bb9\u5668\u521d\u59cb\u5316\u8fc7\u7a0b"},"Spring \u5bb9\u5668\u521d\u59cb\u5316\u8fc7\u7a0b"),(0,a.kt)("h3",{id:"\u521d\u59cb\u5316\u5165\u53e3"},"\u521d\u59cb\u5316\u5165\u53e3"),(0,a.kt)("p",null,"\u5bf9\u4e8exml\u914d\u7f6e\u7684Spring\u5e94\u7528\uff0c\u5728main()\u65b9\u6cd5\u4e2d\u5b9e\u4f8b\u5316 ClasspathXmlApplicationContext \u5373\u53ef\u521b\u5efa\u4e00\u4e2aIoC\u5bb9\u5668\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class XmlHelloWorldApplication {\n\n    public static void main(String[] args) {\n        // create and configure beans\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("daos.xml", "services.xml", "aspects.xml");\n        //retrieve configured instance\n        UserServiceImpl userService = context.getBean("userService", UserServiceImpl.class);\n        // use configured beans\n        List<User> userList = userService.findUserList();\n        userList.forEach(u -> log.info("{}:{}", u.getName(), u.getAge()));\n    }\n\n}\n')),(0,a.kt)("p",null,"\u57fa\u4e8e Spring \u7248\u672c\uff1a5.3.9"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"\npublic ClassPathXmlApplicationContext(String... configLocations) throws BeansException {\n    this(configLocations, true, null);\n}\n\npublic ClassPathXmlApplicationContext(\n        String[] configLocations, boolean refresh, @Nullable ApplicationContext parent)\n        throws BeansException {\n    // \u8bbe\u7f6eBean\u8d44\u6e90\u52a0\u8f7d\u5668\n    super(parent);\n    // \u8bbe\u7f6e\u914d\u7f6e\u8def\u5f84\n    setConfigLocations(configLocations);\n    // \u521d\u59cb\u5316\u5bb9\u5668\n    if (refresh) {\n        refresh();\n    }\n}\n\n")),(0,a.kt)("h3",{id:"\u8bbe\u7f6e\u8d44\u6e90\u89e3\u6790\u5668\u548c\u73af\u5883"},"\u8bbe\u7f6e\u8d44\u6e90\u89e3\u6790\u5668\u548c\u73af\u5883"),(0,a.kt)("p",null,"\u8c03\u7528\u7236\u7c7b\u5bb9\u5668 AbstractApplicationContext \u7684\u6784\u9020\u65b9\u6cd5(",(0,a.kt)("inlineCode",{parentName:"p"},"super(parent)"),"\u65b9\u6cd5)\u4e3a\u5bb9\u5668\u8bbe\u7f6e\u597dBean\u8d44\u6e90\u52a0\u8f7d\u5668"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"\n// \u521d\u59cb\u5316\u5bb9\u5668id, name, \u72b6\u6001\nprotected final Log logger = LogFactory.getLog(getClass());\n\nprivate String id = ObjectUtils.identityToString(this);\n\nprivate String displayName = ObjectUtils.identityToString(this);\n\n// ...\n\npublic AbstractApplicationContext(@Nullable ApplicationContext parent) {\n    this();\n    // \u5c06\u7236\u5bb9\u5668\u7684Environment\u5408\u5e76\u5230\u5f53\u524d\u5bb9\u5668\n    setParent(parent);\n}\n\npublic AbstractApplicationContext() {\n    // Spring \u8d44\u6e90\u52a0\u8f7d\u5668\n    this.resourcePatternResolver = getResourcePatternResolver();\n}\n\nprotected ResourcePatternResolver getResourcePatternResolver() {\n    return new PathMatchingResourcePatternResolver(this);\n}\n\n")),(0,a.kt)("p",null,"\u901a\u8fc7AbstractApplicationContext\u7684setParent(parent)\u65b9\u6cd5\u5c06\u7236\u5bb9\u5668\u7684Environment\u5408\u5e76\u5230\u5f53\u524d\u5bb9\u5668"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"\npublic void setParent(@Nullable ApplicationContext parent) {\n    this.parent = parent;\n    if (parent != null) {\n        Environment parentEnvironment = parent.getEnvironment();\n        if (parentEnvironment instanceof ConfigurableEnvironment) {\n            getEnvironment().merge((ConfigurableEnvironment) parentEnvironment);\n        }\n    }\n}\n\n")),(0,a.kt)("h3",{id:"\u8bbe\u7f6e\u914d\u7f6e\u8def\u5f84"},"\u8bbe\u7f6e\u914d\u7f6e\u8def\u5f84"),(0,a.kt)("p",null,"\u5728\u8bbe\u7f6e\u5bb9\u5668\u7684\u8d44\u6e90\u52a0\u8f7d\u5668\u4e4b\u540e\uff0c\u63a5\u4e0b\u6765 ",(0,a.kt)("inlineCode",{parentName:"p"},"ClassPathXmlApplicationContext")," \u6267\u884c ",(0,a.kt)("inlineCode",{parentName:"p"},"setConfigLocations()")," \u65b9\u6cd5 \u901a\u8fc7\u8c03\u7528\u5176\u7236\u7c7b ",(0,a.kt)("inlineCode",{parentName:"p"},"AbstractRefreshableConfigApplicationContext")," \u7684\u65b9\u6cd5\u8fdb\u884c\u5bf9Bean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6\u7684\u5b9a\u4f4d"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'\npublic void setConfigLocations(@Nullable String... locations) {\n    if (locations != null) {\n        Assert.noNullElements(locations, "Config locations must not be null");\n        this.configLocations = new String[locations.length];\n        for (int i = 0; i < locations.length; i++) {\n            // \u89e3\u6790\u914d\u7f6e\u8def\u5f84: \u66ff\u6362\u5360\u4f4d\u7b26\u4e3a\u5177\u4f53\u7684\u503c\n            this.configLocations[i] = resolvePath(locations[i]).trim();\n        }\n    }\n    else {\n        this.configLocations = null;\n    }\n}\n\n')),(0,a.kt)("h3",{id:"\u521d\u59cb\u5316\u7684\u4e3b\u6d41\u7a0b"},"\u521d\u59cb\u5316\u7684\u4e3b\u6d41\u7a0b"),(0,a.kt)("p",null,"Spring IoC\u5bb9\u5668\u5bf9Bean\u5b9a\u4e49\u8d44\u6e90\u7684\u8f7d\u5165\u662f\u4ecerefresh()\u51fd\u6570\u5f00\u59cb\u7684\uff0crefresh()\u662f\u4e00\u4e2a\u6a21\u677f\u65b9\u6cd5\uff0crefresh()\u65b9\u6cd5\u7684\u4f5c\u7528\u662f\uff1a\u5728\u521b\u5efaIoC\u5bb9\u5668\u524d\uff0c\u5982\u679c\u5df2\u7ecf\u6709\u5bb9\u5668\u5b58\u5728\uff0c\u5219\u9700\u8981\u628a\u5df2\u6709\u7684\u5bb9\u5668\u9500\u6bc1\u548c\u5173\u95ed\uff0c\u4ee5\u4fdd\u8bc1\u5728refresh\u4e4b\u540e\u4f7f\u7528\u7684\u662f\u65b0\u5efa\u7acb\u8d77\u6765\u7684IoC\u5bb9\u5668\u3002refresh\u7684\u4f5c\u7528\u7c7b\u4f3c\u4e8e\u5bf9IoC\u5bb9\u5668\u7684\u91cd\u542f\uff0c\u5728\u65b0\u5efa\u7acb\u597d\u7684\u5bb9\u5668\u4e2d\u5bf9\u5bb9\u5668\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5bf9Bean\u5b9a\u4e49\u8d44\u6e90\u8fdb\u884c\u8f7d\u5165\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// org.springframework.context.support.AbstractApplicationContext#refresh\npublic void refresh() throws BeansException, IllegalStateException {\n    synchronized (this.startupShutdownMonitor) {\n        StartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");\n\n        // Prepare this context for refreshing.\n        prepareRefresh();\n\n        // Tell the subclass to refresh the internal bean factory.\n        // \u89e3\u6790 BeanDefinition \u5728\u8fd9\u4e00\u6b65\n        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n        // Prepare the bean factory for use in this context.\n        prepareBeanFactory(beanFactory);\n\n        try {\n            // Allows post-processing of the bean factory in context subclasses.\n            postProcessBeanFactory(beanFactory);\n\n            StartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");\n            // Invoke factory processors registered as beans in the context.\n            invokeBeanFactoryPostProcessors(beanFactory);\n\n            // Register bean processors that intercept bean creation.\n            registerBeanPostProcessors(beanFactory);\n            beanPostProcess.end();\n\n            // Initialize message source for this context.\n            initMessageSource();\n\n            // Initialize event multicaster for this context.\n            initApplicationEventMulticaster();\n\n            // Initialize other special beans in specific context subclasses.\n            onRefresh();\n\n            // Check for listener beans and register them.\n            registerListeners();\n\n            // Instantiate all remaining (non-lazy-init) singletons.\n            // preInstantiateSingletons, \u901a\u8fc7 BeanDefinition \u521b\u5efa Bean, \u6838\u5fc3\u7684 doGetBean() \u65b9\u6cd5\u5728\u8fd9\u4e00\u6b65\n            finishBeanFactoryInitialization(beanFactory);\n\n            // Last step: publish corresponding event.\n            finishRefresh();\n        }\n\n        catch (BeansException ex) {\n            if (logger.isWarnEnabled()) {\n                logger.warn("Exception encountered during context initialization - " +\n                        "cancelling refresh attempt: " + ex);\n            }\n\n            // Destroy already created singletons to avoid dangling resources.\n            destroyBeans();\n\n            // Reset \'active\' flag.\n            cancelRefresh(ex);\n\n            // Propagate exception to caller.\n            throw ex;\n        }\n\n        finally {\n            // Reset common introspection caches in Spring\'s core, since we\n            // might not ever need metadata for singleton beans anymore...\n            resetCommonCaches();\n            contextRefresh.end();\n        }\n    }\n}\n\n')),(0,a.kt)("p",null,"\u8fd9\u91cc\u7684\u8bbe\u8ba1\u4e0a\u662f\u4e00\u4e2a\u975e\u5e38\u5178\u578b\u7684\u8d44\u6e90\u7c7b\u52a0\u8f7d\u5904\u7406\u578b\u7684\u601d\u8def\uff0c\u5934\u8111\u4e2d\u9700\u8981\u5f62\u6210\u5982\u4e0b\u56fe\u7684",(0,a.kt)("strong",{parentName:"p"},"\u9876\u5c42\u601d\u8def"),"\uff08\u800c\u4e0d\u662f\u53ea\u505c\u7559\u5728\u6d41\u6c34\u5f0f\u7684\u65b9\u6cd5\u4e0a\u9762\uff09\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"\u6a21\u677f\u65b9\u6cd5\u8bbe\u8ba1\u6a21\u5f0f"),"\uff0c\u6a21\u677f\u65b9\u6cd5\u4e2d\u4f7f\u7528\u5178\u578b\u7684 ",(0,a.kt)("strong",{parentName:"li"},"\u94a9\u5b50\u65b9\u6cd5")),(0,a.kt)("li",{parentName:"ul"},"\u5c06 ",(0,a.kt)("strong",{parentName:"li"},"\u5177\u4f53\u7684\u521d\u59cb\u5316\u52a0\u8f7d\u65b9\u6cd5")," \u63d2\u5165\u5230\u94a9\u5b50\u65b9\u6cd5\u4e4b\u95f4"),(0,a.kt)("li",{parentName:"ul"},"\u5c06\u521d\u59cb\u5316\u7684\u9636\u6bb5\u5c01\u88c5\uff0c\u7528\u6765\u8bb0\u5f55\u5f53\u524d\u521d\u59cb\u5316\u5230\u4ec0\u4e48\u9636\u6bb5\uff1b\u5e38\u89c1\u7684\u8bbe\u8ba1\u662fxxxPhase/xxxStage\uff1b"),(0,a.kt)("li",{parentName:"ul"},"\u8d44\u6e90\u52a0\u8f7d\u521d\u59cb\u5316\u6709\u5931\u8d25\u7b49\u5904\u7406\uff0c\u5fc5\u7136\u662f",(0,a.kt)("strong",{parentName:"li"},"try/catch/finally"),"...")),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(9223).Z,width:"1104",height:"703"})),(0,a.kt)("h4",{id:"\u521d\u59cb\u5316-beanfactory-\u4e4b-obtainfreshbeanfactory"},"\u521d\u59cb\u5316 BeanFactory \u4e4b obtainFreshBeanFactory"),(0,a.kt)("p",null,"AbstractApplicationContext \u7684 obtainFreshBeanFactory()\u65b9\u6cd5 \u8c03\u7528\u5b50\u7c7b\u5bb9\u5668\u7684 refreshBeanFactory()\u65b9\u6cd5\uff0c\u542f\u52a8\u5bb9\u5668\u8f7d\u5165Bean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6\u7684\u8fc7\u7a0b\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'\n// Tell the subclass to refresh the internal bean factory.\nConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n// org.springframework.context.support.AbstractApplicationContext#obtainFreshBeanFactory\nprotected ConfigurableListableBeanFactory obtainFreshBeanFactory() {\n    // \u8fd9\u91cc\u4f7f\u7528\u4e86\u59d4\u6d3e\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u7236\u7c7b\u5b9a\u4e49\u4e86\u62bd\u8c61\u7684refreshBeanFactory()\u65b9\u6cd5\uff0c\u5177\u4f53\u5b9e\u73b0\u8c03\u7528\u5b50\u7c7b\u5bb9\u5668\u7684refreshBeanFactory()\u65b9\u6cd5\n    refreshBeanFactory();\n    return getBeanFactory();\n}\n\n// org.springframework.context.support.AbstractRefreshableApplicationContext#refreshBeanFactory\nprotected final void refreshBeanFactory() throws BeansException {\n    if (hasBeanFactory()) {\n        // \u5728\u521b\u5efaIoC\u5bb9\u5668\u524d\uff0c\u5982\u679c\u5df2\u7ecf\u6709\u5bb9\u5668\u5b58\u5728\uff0c\u5219\u9700\u8981\u628a\u5df2\u6709\u7684\u5bb9\u5668\u9500\u6bc1\u548c\u5173\u95ed\n        destroyBeans();\n        closeBeanFactory();\n    }\n    try {\n        // \u521b\u5efaDefaultListableBeanFactory\n        DefaultListableBeanFactory beanFactory = createBeanFactory();\n        beanFactory.setSerializationId(getId());\n        // \u5bf9IoC\u5bb9\u5668\u8fdb\u884c\u5b9a\u5236\u5316\uff0c\u5982\u662f\u5426\u5141\u8bb8\u5faa\u73af\u4f9d\u8d56\u3001\u662f\u5426\u5141\u8bb8 beanDefinition \u8986\u76d6\n        customizeBeanFactory(beanFactory);\n        // loadBeanDefinitions(beanFactory)\u88c5\u8f7dbean\u5b9a\u4e49, \u59d4\u6d3e\u6a21\u5f0f\uff0c\u5728\u5f53\u524d\u7c7b\u4e2d\u53ea\u5b9a\u4e49\u4e86\u62bd\u8c61\u7684loadBeanDefinitions\u65b9\u6cd5\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u8c03\u7528\u5b50\u7c7b\u5bb9\u5668\n        loadBeanDefinitions(beanFactory);\n        this.beanFactory = beanFactory;\n    }\n    catch (IOException ex) {\n        throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex);\n    }\n}\n\n')),(0,a.kt)("h4",{id:"\u521d\u59cb\u5316beanfactory\u4e4bloadbeandefinitions"},"\u521d\u59cb\u5316BeanFactory\u4e4bloadBeanDefinitions"),(0,a.kt)("p",null,"AbstractRefreshableApplicationContext\u4e2d\u53ea\u5b9a\u4e49\u4e86\u62bd\u8c61\u7684 loadBeanDefinitions \u65b9\u6cd5\uff0c\u5bb9\u5668\u771f\u6b63\u8c03\u7528\u7684\u662f\u5176\u5b50\u7c7bAbstractXmlApplicationContext\u5bf9\u8be5\u65b9\u6cd5\u7684\u5b9e\u73b0\uff0cAbstractXmlApplicationContext\u7684\u4e3b\u8981\u6e90\u7801\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// org.springframework.context.support.AbstractXmlApplicationContext#loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory)\nprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException {\n    // \u521b\u5efaXmlBeanDefinitionReader\uff0c\u5373\u521b\u5efaBean\u8bfb\u53d6\u5668\uff0c\u5e76\u901a\u8fc7\u56de\u8c03\u8bbe\u7f6e\u5230\u5bb9\u5668\u4e2d\u53bb\uff0c\u5bb9\u5668\u4f7f\u7528\u8be5\u8bfb\u53d6\u5668\u8bfb\u53d6Bean\u5b9a\u4e49\u8d44\u6e90\n    XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);\n\n    // \u914d\u7f6e\u4e0a\u4e0b\u6587\u7684\u73af\u5883\uff0c\u8d44\u6e90\u52a0\u8f7d\u5668\u3001\u89e3\u6790\u5668\n    beanDefinitionReader.setEnvironment(this.getEnvironment());\n    beanDefinitionReader.setResourceLoader(this);\n    beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));\n\n    // \u5141\u8bb8\u5b50\u7c7b\u81ea\u884c\u521d\u59cb\u5316\uff08\u6bd4\u5982\u6821\u9a8c\u673a\u5236\uff09\uff0c\u5e76\u63d0\u4f9b\u771f\u6b63\u7684\u52a0\u8f7d\u65b9\u6cd5\n    initBeanDefinitionReader(beanDefinitionReader);\n    loadBeanDefinitions(beanDefinitionReader);\n}\n\n// org.springframework.context.support.AbstractXmlApplicationContext#loadBeanDefinitions(org.springframework.beans.factory.xml.XmlBeanDefinitionReader)\nprotected void loadBeanDefinitions(XmlBeanDefinitionReader reader) throws BeansException, IOException {\n    // \u52a0\u8f7dXML\u914d\u7f6e\u65b9\u5f0f\u91cc\u7684Bean\u5b9a\u4e49\u7684\u8d44\u6e90\n    Resource[] configResources = getConfigResources();\n    if (configResources != null) {\n        reader.loadBeanDefinitions(configResources);\n    }\n    // \u52a0\u8f7d\u6784\u9020\u51fd\u6570\u91cc\u914d\u7f6e\u7684Bean\u914d\u7f6e\u6587\u4ef6\uff0c\u5373{"aspects.xml", "daos.xml", "services.xml"}\n    String[] configLocations = getConfigLocations();\n    if (configLocations != null) {\n        reader.loadBeanDefinitions(configLocations);\n    }\n}\n\n')),(0,a.kt)("p",null,"\u8fd9\u91cc\u53ef\u4ee5\u5148\u7565\u8fc7 \u5982\u4f55\u5c06 xml\u914d\u7f6e\u8f6c\u6362\u4e3a BeanDefinition"),(0,a.kt)("p",null,"Xml Bean\u8bfb\u53d6\u5668(XmlBeanDefinitionReader)\u8c03\u7528\u5176\u7236\u7c7bAbstractBeanDefinitionReader\u7684 reader.loadBeanDefinitions\u65b9\u6cd5\u8bfb\u53d6Bean\u5b9a\u4e49\u8d44\u6e90\u3002"),(0,a.kt)("p",null,"\u7531\u4e8e\u6211\u4eec\u4f7f\u7528ClassPathXmlApplicationContext\u4f5c\u4e3a\u4f8b\u5b50\u5206\u6790\uff0c\u56e0\u6b64getConfigResources\u7684\u8fd4\u56de\u503c\u4e3anull\uff0c\u56e0\u6b64\u7a0b\u5e8f\u6267\u884creader.loadBeanDefinitions(configLocations)\u5206\u652f"),(0,a.kt)("h4",{id:"abstractbeandefinitionreader\u8bfb\u53d6bean\u5b9a\u4e49\u8d44\u6e90"},"AbstractBeanDefinitionReader\u8bfb\u53d6Bean\u5b9a\u4e49\u8d44\u6e90"),(0,a.kt)("p",null,"AbstractBeanDefinitionReader\u7684loadBeanDefinitions\u65b9\u6cd5\u6e90\u7801\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// AbstractBeanDefinitionReader#loadBeanDefinitions(java.lang.String...)\npublic int loadBeanDefinitions(String... locations) throws BeanDefinitionStoreException {\n    Assert.notNull(locations, "Location array must not be null");\n    int count = 0;\n    for (String location : locations) {\n        count += loadBeanDefinitions(location);\n    }\n    return count;\n}\n\n// AbstractBeanDefinitionReader#loadBeanDefinitions(java.lang.String, java.util.Set<org.springframework.core.io.Resource>)\npublic int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException {\n    ResourceLoader resourceLoader = getResourceLoader();\n    if (resourceLoader == null) {\n        throw new BeanDefinitionStoreException(\n                "Cannot load bean definitions from location [" + location + "]: no ResourceLoader available");\n    }\n\n    if (resourceLoader instanceof ResourcePatternResolver) {\n        // Resource pattern matching available.\n        try {\n            Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);\n            int count = loadBeanDefinitions(resources);\n            if (actualResources != null) {\n                Collections.addAll(actualResources, resources);\n            }\n            if (logger.isTraceEnabled()) {\n                logger.trace("Loaded " + count + " bean definitions from location pattern [" + location + "]");\n            }\n            return count;\n        }\n        catch (IOException ex) {\n            throw new BeanDefinitionStoreException(\n                    "Could not resolve bean definition resource pattern [" + location + "]", ex);\n        }\n    }\n    else {\n        // Can only load single resources by absolute URL.\n        Resource resource = resourceLoader.getResource(location);\n        int count = loadBeanDefinitions(resource);\n        if (actualResources != null) {\n            actualResources.add(resource);\n        }\n        if (logger.isTraceEnabled()) {\n            logger.trace("Loaded " + count + " bean definitions from location [" + location + "]");\n        }\n        return count;\n    }\n}\n')),(0,a.kt)("p",null,"\u4ece\u5bf9AbstractBeanDefinitionReader\u7684loadBeanDefinitions\u65b9\u6cd5\u6e90\u7801\u5206\u6790\u53ef\u4ee5\u770b\u51fa\u8be5\u65b9\u6cd5\u505a\u4e86\u4ee5\u4e0b\u4e24\u4ef6\u4e8b\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u9996\u5148\uff0c\u8c03\u7528\u8d44\u6e90\u52a0\u8f7d\u5668\u7684\u83b7\u53d6\u8d44\u6e90\u65b9\u6cd5resourceLoader.getResource(location)\uff0c\u83b7\u53d6\u5230\u8981\u52a0\u8f7d\u7684\u8d44\u6e90\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u5176\u6b21\uff0c\u771f\u6b63\u6267\u884c\u52a0\u8f7d\u529f\u80fd\u662f\u5176\u5b50\u7c7bXmlBeanDefinitionReader\u7684loadBeanDefinitions\u65b9\u6cd5\u3002")),(0,a.kt)("h4",{id:"xmlbeandefinitionreader\u52a0\u8f7dbean\u5b9a\u4e49\u8d44\u6e90"},"XmlBeanDefinitionReader\u52a0\u8f7dBean\u5b9a\u4e49\u8d44\u6e90"),(0,a.kt)("p",null,"\u4ee3\u8868bean\u6587\u4ef6\u7684\u8d44\u6e90\u5b9a\u4e49\u4ee5\u540e\u7684\u8f7d\u5165\u8fc7\u7a0b"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// XmlBeanDefinitionReader#loadBeanDefinitions(EncodedResource)\npublic int loadBeanDefinitions(EncodedResource encodedResource) throws BeanDefinitionStoreException {\n    Assert.notNull(encodedResource, "EncodedResource must not be null");\n    if (logger.isTraceEnabled()) {\n        logger.trace("Loading XML bean definitions from " + encodedResource);\n    }\n\n    Set<EncodedResource> currentResources = this.resourcesCurrentlyBeingLoaded.get();\n\n    if (!currentResources.add(encodedResource)) {\n        throw new BeanDefinitionStoreException(\n                "Detected cyclic loading of " + encodedResource + " - check your import definitions!");\n    }\n\n    try (InputStream inputStream = encodedResource.getResource().getInputStream()) {\n        InputSource inputSource = new InputSource(inputStream);\n        if (encodedResource.getEncoding() != null) {\n            inputSource.setEncoding(encodedResource.getEncoding());\n        }\n        // \u5b9e\u9645\u7684load\u65b9\u6cd5\n        return doLoadBeanDefinitions(inputSource, encodedResource.getResource());\n    }\n    catch (IOException ex) {\n        throw new BeanDefinitionStoreException(\n                "IOException parsing XML document from " + encodedResource.getResource(), ex);\n    }\n    finally {\n        currentResources.remove(encodedResource);\n        if (currentResources.isEmpty()) {\n            this.resourcesCurrentlyBeingLoaded.remove();\n        }\n    }\n}\n\n// XmlBeanDefinitionReader#doLoadBeanDefinitions\nprotected int doLoadBeanDefinitions(InputSource inputSource, Resource resource)\n            throws BeanDefinitionStoreException {\n\n    try {\n        // \u5c06Bean\u5b9a\u4e49\u8d44\u6e90\u8f6c\u6362\u6210Document\u5bf9\n        Document doc = doLoadDocument(inputSource, resource);\n        // \u91cd\u70b9\uff1a\u6309\u7167Spring\u7684Bean\u8bed\u4e49\u8981\u6c42\u5c06Bean\u5b9a\u4e49\u8d44\u6e90\u89e3\u6790\u5e76\u8f6c\u6362\u4e3a\u5bb9\u5668\u5185\u90e8\u6570\u636e\u7ed3\u6784\n        int count = registerBeanDefinitions(doc, resource);\n        if (logger.isDebugEnabled()) {\n            logger.debug("Loaded " + count + " bean definitions from " + resource);\n        }\n        return count;\n    }\n    catch (BeanDefinitionStoreException ex) {\n        throw ex;\n    }\n    catch (SAXParseException ex) {\n        throw new XmlBeanDefinitionStoreException(resource.getDescription(),\n                "Line " + ex.getLineNumber() + " in XML document from " + resource + " is invalid", ex);\n    }\n    catch (SAXException ex) {\n        throw new XmlBeanDefinitionStoreException(resource.getDescription(),\n                "XML document from " + resource + " is invalid", ex);\n    }\n    catch (ParserConfigurationException ex) {\n        throw new BeanDefinitionStoreException(resource.getDescription(),\n                "Parser configuration exception parsing XML from " + resource, ex);\n    }\n    catch (IOException ex) {\n        throw new BeanDefinitionStoreException(resource.getDescription(),\n                "IOException parsing XML document from " + resource, ex);\n    }\n    catch (Throwable ex) {\n        throw new BeanDefinitionStoreException(resource.getDescription(),\n                "Unexpected exception parsing XML document from " + resource, ex);\n    }\n}\n\n\n')),(0,a.kt)("h4",{id:"xmlbeandefinitionreader\u89e3\u6790\u8f7d\u5165\u7684bean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6"},"XmlBeanDefinitionReader\u89e3\u6790\u8f7d\u5165\u7684Bean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6"),(0,a.kt)("p",null,"XmlBeanDefinitionReader\u7c7b\u4e2d\u7684doLoadBeanDefinitions\u65b9\u6cd5\u662f\u4ece\u7279\u5b9aXML\u6587\u4ef6\u4e2d\u5b9e\u9645\u8f7d\u5165Bean\u5b9a\u4e49\u8d44\u6e90\u7684\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5728\u8f7d\u5165Bean\u5b9a\u4e49\u8d44\u6e90\u4e4b\u540e\u5c06\u5176\u8f6c\u6362\u4e3aDocument\u5bf9\u8c61\uff0c\u63a5\u4e0b\u6765\u8c03\u7528registerBeanDefinitions\u542f\u52a8Spring IoC\u5bb9\u5668\u5bf9Bean\u5b9a\u4e49\u7684\u89e3\u6790\u8fc7\u7a0b\uff0cregisterBeanDefinitions\u65b9\u6cd5\u6e90\u7801\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'\n    public void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {\n        this.readerContext = readerContext;\n        doRegisterBeanDefinitions(doc.getDocumentElement());\n    }\n\n    protected void doRegisterBeanDefinitions(Element root) {\n        BeanDefinitionParserDelegate parent = this.delegate;\n        this.delegate = createDelegate(getReaderContext(), root, parent);\n\n        if (this.delegate.isDefaultNamespace(root)) {\n            String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);\n            if (StringUtils.hasText(profileSpec)) {\n                String[] specifiedProfiles = StringUtils.tokenizeToStringArray(\n                        profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);\n                // We cannot use Profiles.of(...) since profile expressions are not supported\n                // in XML config. See SPR-12458 for details.\n                if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {\n                    if (logger.isDebugEnabled()) {\n                        logger.debug("Skipped XML bean definition file due to specified profiles [" + profileSpec +\n                                "] not matching: " + getReaderContext().getResource());\n                    }\n                    return;\n                }\n            }\n        }\n\n        preProcessXml(root);\n        // \u4eceDocument\u7684\u6839\u5143\u7d20\u5f00\u59cb\u8fdb\u884cBean\u5b9a\u4e49\u7684Document\u5bf9\u8c61 \n        parseBeanDefinitions(root, this.delegate);\n        postProcessXml(root);\n\n        this.delegate = parent;\n    }\n\n\n    protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {\n        if (delegate.isDefaultNamespace(root)) {\n            NodeList nl = root.getChildNodes();\n            for (int i = 0; i < nl.getLength(); i++) {\n                Node node = nl.item(i);\n                if (node instanceof Element) {\n                    Element ele = (Element) node;\n                    if (delegate.isDefaultNamespace(ele)) {\n                        parseDefaultElement(ele, delegate);\n                    }\n                    else {\n                        delegate.parseCustomElement(ele);\n                    }\n                }\n            }\n        }\n        else {\n            delegate.parseCustomElement(root);\n        }\n    }\n\n\n    private void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) {\n        // \u5982\u679c\u5143\u7d20\u8282\u70b9\u662f<Import>\u5bfc\u5165\u5143\u7d20\uff0c\u8fdb\u884c\u5bfc\u5165\u89e3\u6790\n        if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) {\n            importBeanDefinitionResource(ele);\n        }\n        // \u5982\u679c\u5143\u7d20\u8282\u70b9\u662f<Alias>\u522b\u540d\u5143\u7d20\uff0c\u8fdb\u884c\u522b\u540d\u89e3\u6790 \n        else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) {\n            processAliasRegistration(ele);\n        }\n        // \u5982\u679c\u5143\u7d20\u8282\u70b9<Bean>\u5143\u7d20, \u6309\u7167Spring\u7684Bean\u89c4\u5219\u89e3\u6790\u5143\u7d20 \n        else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) {\n            // \u89e3\u6790\u8fc7\u540e\u7684BeanDefinition\u5728IoC\u5bb9\u5668\u4e2d\u7684\u6ce8\u518c\n            processBeanDefinition(ele, delegate);\n        }\n        // \u5982\u679c\u5143\u7d20\u8282\u70b9<Beans>\u5143\u7d20\uff0c\u5373\u5b83\u662f\u5d4c\u5957\u7c7b\u578b\u7684\n        else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) {\n            // recurse\n            doRegisterBeanDefinitions(ele);\n        }\n    }\n\n')),(0,a.kt)("h4",{id:"\u89e3\u6790\u8fc7\u540e\u7684beandefinition\u5728ioc\u5bb9\u5668\u4e2d\u7684\u6ce8\u518c"},"\u89e3\u6790\u8fc7\u540e\u7684BeanDefinition\u5728IoC\u5bb9\u5668\u4e2d\u7684\u6ce8\u518c"),(0,a.kt)("p",null,"Document\u5bf9\u8c61\u7684\u89e3\u6790\u540e\u5f97\u5230\u5c01\u88c5BeanDefinition\u7684BeanDefinitionHold\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528BeanDefinitionReaderUtils\u7684registerBeanDefinition\u65b9\u6cd5\u5411IoC\u5bb9\u5668\u6ce8\u518c\u89e3\u6790\u7684Bean\uff0cBeanDefinitionReaderUtils\u7684\u6ce8\u518c\u7684\u6e90\u7801\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'\nprotected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {\n    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);\n    if (bdHolder != null) {\n        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);\n        try {\n            // \u91cd\u70b9\u5728\u8fd9\u91cc\uff0cRegister the final decorated instance. \u6ce8\u610f\u6e90\u7801\u4e2d\u6709\u6ce8\u91ca\u7684\u5730\u65b9\u90fd\u662f\u91cd\u8981\u7684\u70b9\n            // \u6ce8\u518c\u6700\u7ec8\u7684\u88c5\u9970\u5b9e\u4f8b\n            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());\n        }\n        catch (BeanDefinitionStoreException ex) {\n            getReaderContext().error("Failed to register bean definition with name \'" +\n                    bdHolder.getBeanName() + "\'", ele, ex);\n        }\n        // Send registration event.\n        getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));\n    }\n}\n\n// BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());\npublic static void registerBeanDefinition(\n        BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)\n        throws BeanDefinitionStoreException {\n\n    // Register bean definition under primary name.\n    String beanName = definitionHolder.getBeanName();\n    // \u6ce8\u518cBeanDefinition\n    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());\n\n    // Register aliases for bean name, if any.\n    String[] aliases = definitionHolder.getAliases();\n    if (aliases != null) {\n        for (String alias : aliases) {\n            registry.registerAlias(beanName, alias);\n        }\n    }\n}\n\n')),(0,a.kt)("p",null,"\u5f53\u8c03\u7528BeanDefinitionReaderUtils\u5411IoC\u5bb9\u5668\u6ce8\u518c\u89e3\u6790\u7684BeanDefinition\u65f6\uff0c\u771f\u6b63\u5b8c\u6210\u6ce8\u518c\u529f\u80fd\u7684\u662fDefaultListableBeanFactory\u3002"),(0,a.kt)("h4",{id:"defaultlistablebeanfactory\u5411ioc\u5bb9\u5668\u6ce8\u518c\u89e3\u6790\u540e\u7684beandefinition"},"DefaultListableBeanFactory\u5411IoC\u5bb9\u5668\u6ce8\u518c\u89e3\u6790\u540e\u7684BeanDefinition"),(0,a.kt)("p",null,"IOC\u5bb9\u5668\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a beanDefinitionMap\uff0c \u6ce8\u518c\u5373\u5c06BeanDefinition put\u5230map\u4e2d"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'\n/** Map of bean definition objects, keyed by bean name. */\nprivate final Map<String, BeanDefinition> beanDefinitionMap = new ConcurrentHashMap<>(256);\n\n/** Map from bean name to merged BeanDefinitionHolder. */\nprivate final Map<String, BeanDefinitionHolder> mergedBeanDefinitionHolders = new ConcurrentHashMap<>(256);\n\n// DefaultListableBeanFactory#registerBeanDefinition\npublic void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)\n            throws BeanDefinitionStoreException {\n\n    Assert.hasText(beanName, "Bean name must not be empty");\n    Assert.notNull(beanDefinition, "BeanDefinition must not be null");\n\n    if (beanDefinition instanceof AbstractBeanDefinition) {\n        try {\n            ((AbstractBeanDefinition) beanDefinition).validate();\n        }\n        catch (BeanDefinitionValidationException ex) {\n            throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,\n                    "Validation of bean definition failed", ex);\n        }\n    }\n\n    BeanDefinition existingDefinition = this.beanDefinitionMap.get(beanName);\n    // \u5982\u679c\u5df2\u7ecf\u6ce8\u518c\n    if (existingDefinition != null) {\n        if (!isAllowBeanDefinitionOverriding()) {\n            throw new BeanDefinitionOverrideException(beanName, beanDefinition, existingDefinition);\n        }\n        else if (existingDefinition.getRole() < beanDefinition.getRole()) {\n            // e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE\n            if (logger.isInfoEnabled()) {\n                logger.info("Overriding user-defined bean definition for bean \'" + beanName +\n                        "\' with a framework-generated bean definition: replacing [" +\n                        existingDefinition + "] with [" + beanDefinition + "]");\n            }\n        }\n        else if (!beanDefinition.equals(existingDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug("Overriding bean definition for bean \'" + beanName +\n                        "\' with a different definition: replacing [" + existingDefinition +\n                        "] with [" + beanDefinition + "]");\n            }\n        }\n        else {\n            if (logger.isTraceEnabled()) {\n                logger.trace("Overriding bean definition for bean \'" + beanName +\n                        "\' with an equivalent definition: replacing [" + existingDefinition +\n                        "] with [" + beanDefinition + "]");\n            }\n        }\n        // \u8986\u76d6\n        this.beanDefinitionMap.put(beanName, beanDefinition);\n    }\n    else {\n        if (hasBeanCreationStarted()) {\n            // Cannot modify startup-time collection elements anymore (for stable iteration)\n            synchronized (this.beanDefinitionMap) {\n                this.beanDefinitionMap.put(beanName, beanDefinition);\n                List<String> updatedDefinitions = new ArrayList<>(this.beanDefinitionNames.size() + 1);\n                updatedDefinitions.addAll(this.beanDefinitionNames);\n                updatedDefinitions.add(beanName);\n                this.beanDefinitionNames = updatedDefinitions;\n                removeManualSingletonName(beanName);\n            }\n        }\n        else {\n            // Still in startup registration phase\n            this.beanDefinitionMap.put(beanName, beanDefinition);\n            this.beanDefinitionNames.add(beanName);\n            removeManualSingletonName(beanName);\n        }\n        this.frozenBeanDefinitionNames = null;\n    }\n\n    if (existingDefinition != null || containsSingleton(beanName)) {\n        resetBeanDefinition(beanName);\n    }\n    else if (isConfigurationFrozen()) {\n        clearByTypeCache();\n    }\n}\n\n')),(0,a.kt)("p",null,"\u81f3\u6b64\uff0cBean\u5b9a\u4e49\u8d44\u6e90\u6587\u4ef6\u4e2d\u914d\u7f6e\u7684Bean\u88ab\u89e3\u6790\u8fc7\u540e\uff0c\u5df2\u7ecf\u6ce8\u518c\u5230IoC\u5bb9\u5668\u4e2d\uff0c\u88ab\u5bb9\u5668\u7ba1\u7406\u8d77\u6765\uff0c\u771f\u6b63\u5b8c\u6210\u4e86IoC\u5bb9\u5668\u521d\u59cb\u5316\u6240\u505a\u7684\u5168\u90e8\u5de5\u4f5c\u3002\u73b0 \u5728IoC\u5bb9\u5668\u4e2d\u5df2\u7ecf\u5efa\u7acb\u4e86\u6574\u4e2aBean\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u8fd9\u4e9bBeanDefinition\u4fe1\u606f\u5df2\u7ecf\u53ef\u4ee5\u4f7f\u7528\uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u68c0\u7d22\uff0cIoC\u5bb9\u5668\u7684\u4f5c\u7528\u5c31\u662f\u5bf9\u8fd9\u4e9b\u6ce8\u518c\u7684Bean\u5b9a\u4e49\u4fe1\u606f\u8fdb\u884c\u5904\u7406\u548c\u7ef4\u62a4\u3002\u8fd9\u4e9b\u7684\u6ce8\u518c\u7684Bean\u5b9a\u4e49\u4fe1\u606f\u662fIoC\u5bb9\u5668\u63a7\u5236\u53cd\u8f6c\u7684\u57fa\u7840\uff0c\u6b63\u662f\u6709\u4e86\u8fd9\u4e9b\u6ce8\u518c\u7684\u6570\u636e\uff0c\u5bb9\u5668\u624d\u53ef\u4ee5\u8fdb\u884c\u4f9d\u8d56\u6ce8\u5165\u3002"),(0,a.kt)("h2",{id:"spring-\u5bb9\u5668\u521d\u59cb\u5316\u603b\u7ed3"},"Spring \u5bb9\u5668\u521d\u59cb\u5316\u603b\u7ed3"),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(1118).Z,width:"1218",height:"431"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u521d\u59cb\u5316\u7684\u5165\u53e3\u5728\u5bb9\u5668\u5b9e\u73b0\u4e2d\u7684 refresh()\u8c03\u7528\u6765\u5b8c\u6210")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u5bf9 bean \u5b9a\u4e49\u8f7d\u5165 IOC \u5bb9\u5668\u4f7f\u7528\u7684\u65b9\u6cd5\u662f loadBeanDefinition,\u5176\u4e2d\u7684\u5927\u81f4\u8fc7\u7a0b\u5982\u4e0b\uff1a"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u901a\u8fc7 ResourceLoader \u6765\u5b8c\u6210\u8d44\u6e90\u6587\u4ef6\u4f4d\u7f6e\u7684\u5b9a\u4f4d\uff0cDefaultResourceLoader \u662f\u9ed8\u8ba4\u7684\u5b9e\u73b0\uff0c\u540c\u65f6\u4e0a\u4e0b\u6587\u672c\u8eab\u5c31\u7ed9\u51fa\u4e86 ResourceLoader \u7684\u5b9e\u73b0\uff0c\u53ef\u4ee5\u4ece\u7c7b\u8def\u5f84\uff0c\u6587\u4ef6\u7cfb\u7edf, URL \u7b49\u65b9\u5f0f\u6765\u5b9a\u4e3a\u8d44\u6e90\u4f4d\u7f6e\u3002\u5982\u679c\u662f XmlBeanFactory\u4f5c\u4e3a IOC \u5bb9\u5668\uff0c\u90a3\u4e48\u9700\u8981\u4e3a\u5b83\u6307\u5b9a bean \u5b9a\u4e49\u7684\u8d44\u6e90\uff0c\u4e5f\u5c31\u662f\u8bf4 bean \u5b9a\u4e49\u6587\u4ef6\u65f6\u901a\u8fc7\u62bd\u8c61\u6210 Resource \u6765\u88ab IOC \u5bb9\u5668\u5904\u7406\u7684"),(0,a.kt)("li",{parentName:"ul"},"\u901a\u8fc7 BeanDefinitionReader\u6765\u5b8c\u6210\u5b9a\u4e49\u4fe1\u606f\u7684\u89e3\u6790\u548c Bean \u4fe1\u606f\u7684\u6ce8\u518c, \u5f80\u5f80\u4f7f\u7528\u7684\u662fXmlBeanDefinitionReader \u6765\u89e3\u6790 bean \u7684 xml \u5b9a\u4e49\u6587\u4ef6 - \u5b9e\u9645\u7684\u5904\u7406\u8fc7\u7a0b\u662f\u59d4\u6258\u7ed9 BeanDefinitionParserDelegate \u6765\u5b8c\u6210\u7684\uff0c\u4ece\u800c\u5f97\u5230 bean \u7684\u5b9a\u4e49\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5728 Spring \u4e2d\u4f7f\u7528 BeanDefinition \u5bf9\u8c61\u6765\u8868\u793a - \u8fd9\u4e2a\u540d\u5b57\u53ef\u4ee5\u8ba9\u6211\u4eec\u60f3\u5230loadBeanDefinition,RegisterBeanDefinition \u8fd9\u4e9b\u76f8\u5173\u7684\u65b9\u6cd5 - \u4ed6\u4eec\u90fd\u662f\u4e3a\u5904\u7406 BeanDefinitin \u670d\u52a1\u7684"),(0,a.kt)("li",{parentName:"ul"},"\u5bb9\u5668\u89e3\u6790\u5f97\u5230 BeanDefinition \u4ee5\u540e\uff0c\u9700\u8981\u628a\u5b83\u5728 IOC \u5bb9\u5668\u4e2d\u6ce8\u518c\uff0c\u8fd9\u7531 IOC \u5b9e\u73b0 BeanDefinitionRegistry \u63a5\u53e3\u6765\u5b9e\u73b0\u3002\u6ce8\u518c\u8fc7\u7a0b\u5c31\u662f\u5728 IOC \u5bb9\u5668\u5185\u90e8\u7ef4\u62a4\u7684\u4e00\u4e2aHashMap \u6765\u4fdd\u5b58\u5f97\u5230\u7684 BeanDefinition \u7684\u8fc7\u7a0b\u3002\u8fd9\u4e2a HashMap \u662f IoC \u5bb9\u5668\u6301\u6709 bean \u4fe1\u606f\u7684\u573a\u6240\uff0c\u4ee5\u540e\u5bf9 bean \u7684\u64cd\u4f5c\u90fd\u662f\u56f4\u7ed5\u8fd9\u4e2aHashMap \u6765\u5b9e\u73b0\u7684."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7 BeanFactory \u548c ApplicationContext \u6765\u4eab\u53d7\u5230 Spring IOC \u7684\u670d\u52a1\u4e86,\u5728\u4f7f\u7528 IOC \u5bb9\u5668\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u9664\u4e86\u5c11\u91cf\u7c98\u5408\u4ee3\u7801\uff0c\u7edd\u5927\u591a\u6570\u4ee5\u6b63\u786e IoC \u98ce\u683c\u7f16\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u5b8c\u5168\u4e0d\u7528\u5173\u5fc3\u5982\u4f55\u5230\u8fbe\u5de5\u5382\uff0c\u56e0\u4e3a\u5bb9\u5668\u5c06\u628a\u8fd9\u4e9b\u5bf9\u8c61\u4e0e\u5bb9\u5668\u7ba1\u7406\u7684\u5176\u4ed6\u5bf9\u8c61\u94a9\u5728\u4e00\u8d77\u3002\u57fa\u672c\u7684\u7b56\u7565\u662f\u628a\u5de5\u5382\u653e\u5230\u5df2\u77e5\u7684\u5730\u65b9\uff0c\u6700\u597d\u662f\u653e\u5728\u5bf9\u9884\u671f\u4f7f\u7528\u7684\u4e0a\u4e0b\u6587\u6709\u610f\u4e49\u7684\u5730\u65b9\uff0c\u4ee5\u53ca\u4ee3\u7801\u5c06\u5b9e\u9645\u9700\u8981\u8bbf\u95ee\u5de5\u5382\u7684\u5730\u65b9\u3002 Spring \u672c\u8eab\u63d0\u4f9b\u4e86\u5bf9\u58f0\u660e\u5f0f\u8f7d\u5165 web \u5e94\u7528\u7a0b\u5e8f\u7528\u6cd5\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587,\u5e76\u5c06\u5176\u5b58\u50a8\u5728ServletContext \u4e2d\u7684\u6846\u67b6\u5b9e\u73b0\u3002"))),(0,a.kt)("hr",null),(0,a.kt)("p",null,"\u53c2\u8003\u6587\u6863"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Spring\u8fdb\u9636- Spring IOC\u5b9e\u73b0\u539f\u7406\u8be6\u89e3\u4e4bIOC\u521d\u59cb\u5316\u6d41\u7a0b\uff1a",(0,a.kt)("a",{parentName:"li",href:"https://www.pdai.tech/md/spring/spring-x-framework-ioc-source-2.html"},"https://www.pdai.tech/md/spring/spring-x-framework-ioc-source-2.html"))))}f.isMDXComponent=!0},9223:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/20230516213130-1e9b91ec7d18b3391073390ef6a96160.png"},1118:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/20230516221917-f80574a8bcaf0bf1c79ea137c1a56e1e.png"}}]);
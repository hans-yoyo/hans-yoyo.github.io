"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1836],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(n),h=a,g=c["".concat(i,".").concat(h)]||c[h]||u[h]||s;return n?r.createElement(g,l(l({ref:t},d),{},{components:n})):r.createElement(g,l({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=c;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<s;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},18265:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const s={title:"Spring\u6838\u5fc3-DispatcherServlet \u5904\u7406\u8bf7\u6c42\u6d41\u7a0b",slug:"mvc-dispatcher-servlet-2",sidebar_position:10,keywords:["Spring"],tags:["Spring"],draft:!1,hide_table_of_contents:!1,last_update:{date:"2023-05-27 22:31",author:"Hans"}},l=void 0,o={unversionedId:"spring/Spring\u6838\u5fc3-DispatcherServlet \u5904\u7406\u8bf7\u6c42\u6d41\u7a0b",id:"spring/Spring\u6838\u5fc3-DispatcherServlet \u5904\u7406\u8bf7\u6c42\u6d41\u7a0b",title:"Spring\u6838\u5fc3-DispatcherServlet \u5904\u7406\u8bf7\u6c42\u6d41\u7a0b",description:"DispatcherServlet\u5904\u7406\u8bf7\u6c42\u7684\u8fc7\u7a0b",source:"@site/docs/04.spring/10.Spring\u6838\u5fc3-DispatcherServlet \u5904\u7406\u8bf7\u6c42\u6d41\u7a0b.md",sourceDirName:"04.spring",slug:"/spring/mvc-dispatcher-servlet-2",permalink:"/docs/spring/mvc-dispatcher-servlet-2",draft:!1,tags:[{label:"Spring",permalink:"/docs/tags/spring"}],version:"current",lastUpdatedBy:"Hans",lastUpdatedAt:1685197860,formattedLastUpdatedAt:"2023\u5e745\u670827\u65e5",sidebarPosition:10,frontMatter:{title:"Spring\u6838\u5fc3-DispatcherServlet \u5904\u7406\u8bf7\u6c42\u6d41\u7a0b",slug:"mvc-dispatcher-servlet-2",sidebar_position:10,keywords:["Spring"],tags:["Spring"],draft:!1,hide_table_of_contents:!1,last_update:{date:"2023-05-27 22:31",author:"Hans"}},sidebar:"tutorialSidebar",previous:{title:"Spring\u6838\u5fc3-DispatcherServlet \u521d\u59cb\u5316\u8fc7\u7a0b",permalink:"/docs/spring/mvc-dispatcher-servlet-1"},next:{title:"\u6846\u67b6\u548c\u4e2d\u95f4\u4ef6",permalink:"/docs/category/\u6846\u67b6\u548c\u4e2d\u95f4\u4ef6"}},i={},p=[{value:"DispatcherServlet\u5904\u7406\u8bf7\u6c42\u7684\u8fc7\u7a0b",id:"dispatcherservlet\u5904\u7406\u8bf7\u6c42\u7684\u8fc7\u7a0b",level:2},{value:"\u6574\u4f53\u5904\u7406\u6d41\u7a0b\u56fe",id:"\u6574\u4f53\u5904\u7406\u6d41\u7a0b\u56fe",level:3},{value:"doGet\uff0c\u8bf7\u6c42\u5165\u53e3",id:"doget\u8bf7\u6c42\u5165\u53e3",level:3},{value:"\u5206\u53d1\u8bf7\u6c42 doDispatch",id:"\u5206\u53d1\u8bf7\u6c42-dodispatch",level:3},{value:"\u6620\u5c04\u548c\u9002\u914d\u5668\u5904\u7406",id:"\u6620\u5c04\u548c\u9002\u914d\u5668\u5904\u7406",level:3},{value:"\u89c6\u56fe\u6e32\u67d3",id:"\u89c6\u56fe\u6e32\u67d3",level:3}],d={toc:p};function u(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"dispatcherservlet\u5904\u7406\u8bf7\u6c42\u7684\u8fc7\u7a0b"},"DispatcherServlet\u5904\u7406\u8bf7\u6c42\u7684\u8fc7\u7a0b"),(0,a.kt)("h3",{id:"\u6574\u4f53\u5904\u7406\u6d41\u7a0b\u56fe"},"\u6574\u4f53\u5904\u7406\u6d41\u7a0b\u56fe"),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(279).Z,width:"2308",height:"1052"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u6838\u5fc3\u67b6\u6784\u7684\u5177\u4f53\u6d41\u7a0b\u6b65\u9aa4"),"\u5982\u4e0b\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u9996\u5148 ",(0,a.kt)("strong",{parentName:"li"},"\u7528\u6237\u53d1\u9001\u8bf7\u6c42\u2014\u2014>DispatcherServlet"),"\uff0c\u524d\u7aef\u63a7\u5236\u5668\u6536\u5230\u8bf7\u6c42\u540e\u81ea\u5df1\u4e0d\u8fdb\u884c\u5904\u7406\uff0c\u800c\u662f\u59d4\u6258\u7ed9\u5176\u4ed6\u7684\u89e3\u6790\u5668\u8fdb\u884c \u5904\u7406\uff0c\u4f5c\u4e3a\u7edf\u4e00\u8bbf\u95ee\u70b9\uff0c\u8fdb\u884c\u5168\u5c40\u7684\u6d41\u7a0b\u63a7\u5236\uff1b"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"DispatcherServlet\u2014\u2014>HandlerMapping"),"\uff0c HandlerMapping \u5c06\u4f1a\u628a\u8bf7\u6c42\u6620\u5c04\u4e3a HandlerExecutionChain \u5bf9\u8c61\uff08\u5305\u542b\u4e00 \u4e2aHandler \u5904\u7406\u5668\uff08\u9875\u9762\u63a7\u5236\u5668\uff09\u5bf9\u8c61\u3001\u591a\u4e2aHandlerInterceptor \u62e6\u622a\u5668\uff09\u5bf9\u8c61\uff0c\u901a\u8fc7\u8fd9\u79cd\u7b56\u7565\u6a21\u5f0f\uff0c\u5f88\u5bb9\u6613\u6dfb\u52a0\u65b0 \u7684\u6620\u5c04\u7b56\u7565\uff1b"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"DispatcherServlet\u2014\u2014>HandlerAdapter"),"\uff0cHandlerAdapter \u5c06\u4f1a\u628a\u5904\u7406\u5668\u5305\u88c5\u4e3a\u9002\u914d\u5668\uff0c\u4ece\u800c\u652f\u6301\u591a\u79cd\u7c7b\u578b\u7684\u5904\u7406\u5668\uff0c \u5373\u9002\u914d\u5668\u8bbe\u8ba1\u6a21\u5f0f\u7684\u5e94\u7528\uff0c\u4ece\u800c\u5f88\u5bb9\u6613\u652f\u6301\u5f88\u591a\u7c7b\u578b\u7684\u5904\u7406\u5668\uff1b"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"HandlerAdapter\u2014\u2014>\u5904\u7406\u5668\u529f\u80fd\u5904\u7406\u65b9\u6cd5\u7684\u8c03\u7528"),"\uff0cHandlerAdapter \u5c06\u4f1a\u6839\u636e\u9002\u914d\u7684\u7ed3\u679c\u8c03\u7528\u771f\u6b63\u7684\u5904\u7406\u5668\u7684\u529f\u80fd\u5904 \u7406\u65b9\u6cd5\uff0c\u5b8c\u6210\u529f\u80fd\u5904\u7406\uff1b\u5e76\u8fd4\u56de\u4e00\u4e2aModelAndView \u5bf9\u8c61\uff08\u5305\u542b\u6a21\u578b\u6570\u636e\u3001\u903b\u8f91\u89c6\u56fe\u540d\uff09\uff1b"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"ModelAndView \u7684\u903b\u8f91\u89c6\u56fe\u540d\u2014\u2014> ViewResolver"),"\uff0cViewResolver \u5c06\u628a\u903b\u8f91\u89c6\u56fe\u540d\u89e3\u6790\u4e3a\u5177\u4f53\u7684View\uff0c\u901a\u8fc7\u8fd9\u79cd\u7b56 \u7565\u6a21\u5f0f\uff0c\u5f88\u5bb9\u6613\u66f4\u6362\u5176\u4ed6\u89c6\u56fe\u6280\u672f\uff1b"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"View\u2014\u2014>\u6e32\u67d3"),"\uff0cView \u4f1a\u6839\u636e\u4f20\u8fdb\u6765\u7684Model \u6a21\u578b\u6570\u636e\u8fdb\u884c\u6e32\u67d3\uff0c\u6b64\u5904\u7684Model \u5b9e\u9645\u662f\u4e00\u4e2aMap \u6570\u636e\u7ed3\u6784\uff0c\u56e0\u6b64 \u5f88\u5bb9\u6613\u652f\u6301\u5176\u4ed6\u89c6\u56fe\u6280\u672f\uff1b"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"\u8fd4\u56de\u63a7\u5236\u6743\u7ed9DispatcherServlet"),"\uff0c\u7531DispatcherServlet \u8fd4\u56de\u54cd\u5e94\u7ed9\u7528\u6237\uff0c\u5230\u6b64\u4e00\u4e2a\u6d41\u7a0b\u7ed3\u675f\u3002")),(0,a.kt)("h3",{id:"doget\u8bf7\u6c42\u5165\u53e3"},"doGet\uff0c\u8bf7\u6c42\u5165\u53e3"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// org.springframework.web.servlet.FrameworkServlet#doGet\nprotected final void doGet(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n    // \u5904\u7406\u8bf7\u6c42\uff0cdoGet\u3001doPost\u3001doPut\u76f8\u540c\n    processRequest(request, response);\n}\n\n// org.springframework.web.servlet.FrameworkServlet#processRequest\nprotected final void processRequest(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n\n    long startTime = System.currentTimeMillis();\n    Throwable failureCause = null;\n\n    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();\n    LocaleContext localeContext = buildLocaleContext(request);\n\n    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();\n    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);\n\n    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), new RequestBindingInterceptor());\n\n    initContextHolders(request, localeContext, requestAttributes);\n\n    try {\n        // \u6709\u5177\u4f53\u7684Servlet\u5b9e\u73b0\n        doService(request, response);\n    }\n    catch (ServletException | IOException ex) {\n        failureCause = ex;\n        throw ex;\n    }\n    catch (Throwable ex) {\n        failureCause = ex;\n        throw new NestedServletException("Request processing failed", ex);\n    }\n\n    finally {\n        resetContextHolders(request, previousLocaleContext, previousAttributes);\n        if (requestAttributes != null) {\n            requestAttributes.requestCompleted();\n        }\n        logResult(request, response, failureCause, asyncManager);\n        publishRequestHandledEvent(request, response, startTime, failureCause);\n    }\n}\n\n// DispatcherServlet#doService\nprotected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {\n    logRequest(request);\n\n    // Keep a snapshot of the request attributes in case of an include,\n    // to be able to restore the original attributes after the include.\n    Map<String, Object> attributesSnapshot = null;\n    if (WebUtils.isIncludeRequest(request)) {\n        attributesSnapshot = new HashMap<>();\n        Enumeration<?> attrNames = request.getAttributeNames();\n        while (attrNames.hasMoreElements()) {\n            String attrName = (String) attrNames.nextElement();\n            if (this.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) {\n                attributesSnapshot.put(attrName, request.getAttribute(attrName));\n            }\n        }\n    }\n\n    // Make framework objects available to handlers and view objects.\n    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());\n    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);\n    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);\n    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());\n\n    if (this.flashMapManager != null) {\n        FlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);\n        if (inputFlashMap != null) {\n            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));\n        }\n        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());\n        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);\n    }\n\n    RequestPath previousRequestPath = null;\n    if (this.parseRequestPath) {\n        previousRequestPath = (RequestPath) request.getAttribute(ServletRequestPathUtils.PATH_ATTRIBUTE);\n        ServletRequestPathUtils.parseAndCache(request);\n    }\n\n    try {\n        doDispatch(request, response);\n    }\n    finally {\n        if (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n            // Restore the original attribute snapshot, in case of an include.\n            if (attributesSnapshot != null) {\n                restoreAttributesAfterInclude(request, attributesSnapshot);\n            }\n        }\n        if (this.parseRequestPath) {\n            ServletRequestPathUtils.setParsedRequestPath(previousRequestPath, request);\n        }\n    }\n}\n')),(0,a.kt)("h3",{id:"\u5206\u53d1\u8bf7\u6c42-dodispatch"},"\u5206\u53d1\u8bf7\u6c42 doDispatch"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// DispatcherServlet#doDispatch\nprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n    HttpServletRequest processedRequest = request;\n    HandlerExecutionChain mappedHandler = null;\n    boolean multipartRequestParsed = false;\n\n    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n    try {\n        ModelAndView mv = null;\n        Exception dispatchException = null;\n\n        try {\n            // \u5224\u65ad\u662f\u4e0d\u662f\u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\u7684request\n            processedRequest = checkMultipart(request);\n            multipartRequestParsed = (processedRequest != request);\n\n            // Determine handler for the current request.\n            // \u6839\u636erequest\u83b7\u53d6\u5339\u914d\u7684HandlerMethod\uff0c\u5e76\u52a0\u5165\u76f8\u5173\u7684 HandlerInterceptor, \u5171\u540c\u7ec4\u5efa HandlerExecutionChain\n            mappedHandler = getHandler(processedRequest);\n            if (mappedHandler == null) {\n                noHandlerFound(processedRequest, response);\n                return;\n            }\n\n            // Determine handler adapter for the current request.\n            // \u6839\u636ehandler\u83b7\u53d6\u5339\u914d\u7684handlerAdapter\uff1aRequestMappingHandlerAdapter\n            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n            // Process last-modified header, if supported by the handler.\n            String method = request.getMethod();\n            boolean isGet = HttpMethod.GET.matches(method);\n            if (isGet || HttpMethod.HEAD.matches(method)) {\n                long lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n                if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n                    return;\n                }\n            }\n            // \u6267\u884c\u62e6\u622a\u5668\u7684preHandle\u65b9\u6cd5\n            if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n                return;\n            }\n\n            // Actually invoke the handler.\n            // \u91cd\u8981\uff01\u771f\u6b63handle\u5904\u7406\uff0c\u6267\u884c\u5bf9\u5e94\u7684\u65b9\u6cd5\uff0c\u5e76\u8fd4\u56demodelAndView\n            // \u901a\u8fc7\u53cd\u5c04\u6267\u884c HanderMethod \u5bf9\u5e94\u7684\u65b9\u6cd5 UserController#list\n            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n            if (asyncManager.isConcurrentHandlingStarted()) {\n                return;\n            }\n            // \u901a\u8fc7\u89c6\u56fe\u7684prefix\u548cpostfix\u83b7\u53d6\u5b8c\u6574\u7684\u89c6\u56fe\u540d\n            applyDefaultViewName(processedRequest, mv);\n            // \u5e94\u7528\u540e\u7f6e\u7684\u62e6\u622a\u5668\n            mappedHandler.applyPostHandle(processedRequest, response, mv);\n        }\n        catch (Exception ex) {\n            dispatchException = ex;\n        }\n        catch (Throwable err) {\n            // As of 4.3, we\'re processing Errors thrown from handler methods as well,\n            // making them available for @ExceptionHandler methods and other scenarios.\n            dispatchException = new NestedServletException("Handler dispatch failed", err);\n        }\n        // \u5904\u7406handler\u5904\u7406\u7684\u7ed3\u679c\uff0c\u663e\u7136\u5c31\u662f\u5bf9ModelAndView \u6216\u8005 \u51fa\u73b0\u7684Excpetion\u5904\u7406\n        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n    }\n    catch (Exception ex) {\n        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n    }\n    catch (Throwable err) {\n        triggerAfterCompletion(processedRequest, response, mappedHandler,\n                new NestedServletException("Handler processing failed", err));\n    }\n    finally {\n        if (asyncManager.isConcurrentHandlingStarted()) {\n            // Instead of postHandle and afterCompletion\n            if (mappedHandler != null) {\n                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n            }\n        }\n        else {\n            // Clean up any resources used by a multipart request.\n            if (multipartRequestParsed) {\n                cleanupMultipart(processedRequest);\n            }\n        }\n    }\n}\n')),(0,a.kt)("h3",{id:"\u6620\u5c04\u548c\u9002\u914d\u5668\u5904\u7406"},"\u6620\u5c04\u548c\u9002\u914d\u5668\u5904\u7406"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"HandlerExecutionChain"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// DispatcherServlet#getHandler, \u904d\u5386handlerMappings\n// org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\n// org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\n// org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0\nprotected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n    if (this.handlerMappings != null) {\n        for (HandlerMapping mapping : this.handlerMappings) {\n            HandlerExecutionChain handler = mapping.getHandler(request);\n            if (handler != null) {\n                return handler;\n            }\n        }\n    }\n    return null;\n}\n\n// org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#getHandlerInternal\nprotected HandlerMethod getHandlerInternal(HttpServletRequest request) throws Exception {\n    // /api/users\n    String lookupPath = initLookupPath(request);\n    this.mappingRegistry.acquireReadLock();\n    try {\n        // \u6839\u636e lookupPath \u67e5\u627ebestMatch \u7684 HandlerMethod\n        HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);\n        return (handlerMethod != null ? handlerMethod.createWithResolvedBean() : null);\n    }\n    finally {\n        this.mappingRegistry.releaseReadLock();\n    }\n}\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"lookupHandlerMethod"))),(0,a.kt)("p",null,"\u627e\u5230\u6700\u4f73\u5339\u914d\u7684\u65b9\u6cd5"),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(27449).Z,width:"1361",height:"829"})),(0,a.kt)("p",null,"\u83b7\u53d6\u5230 HandlerMethod \u540e\uff0c\u6784\u5efa\u5bf9\u5e94\u7684 HandlerMapperAdapter\u3002\u52a0\u5165\u76f8\u5173\u7684\u62e6\u622a\u5668"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"\n\n// org.springframework.web.servlet.handler.AbstractHandlerMapping#getHandlerExecutionChain\n// \u7ec4\u5efa HandlerExecutionChain\nprotected HandlerExecutionChain getHandlerExecutionChain(Object handler, HttpServletRequest request) {\n    HandlerExecutionChain chain = (handler instanceof HandlerExecutionChain ?\n            (HandlerExecutionChain) handler : new HandlerExecutionChain(handler));\n\n    for (HandlerInterceptor interceptor : this.adaptedInterceptors) {\n        if (interceptor instanceof MappedInterceptor) {\n            MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;\n            if (mappedInterceptor.matches(request)) {\n                chain.addInterceptor(mappedInterceptor.getInterceptor());\n            }\n        }\n        else {\n            chain.addInterceptor(interceptor);\n        }\n    }\n    return chain;\n}\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"HandlerAdapter"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'\n\n// org.springframework.web.servlet.DispatcherServlet#getHandlerAdapter\n// \u83b7\u53d6\u5bf9\u5e94\u7684Handler\u9002\u914d\u5668\nprotected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException {\n    if (this.handlerAdapters != null) {\n        for (HandlerAdapter adapter : this.handlerAdapters) {\n            if (adapter.supports(handler)) {\n                return adapter;\n            }\n        }\n    }\n    throw new ServletException("No adapter for handler [" + handler +\n            "]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler");\n}\n\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"**HandlerAdapter#handle"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// AbstractHandlerMethodAdapter#handle\npublic final ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler)\n        throws Exception {\n\n    return handleInternal(request, response, (HandlerMethod) handler);\n}\n\n// RequestMappingHandlerAdapter#handleInternal\nprotected ModelAndView handleInternal(HttpServletRequest request,\n            HttpServletResponse response, HandlerMethod handlerMethod) throws Exception {\n\n    ModelAndView mav;\n    checkRequest(request);\n\n    // Execute invokeHandlerMethod in synchronized block if required.\n    if (this.synchronizeOnSession) {\n        HttpSession session = request.getSession(false);\n        if (session != null) {\n            Object mutex = WebUtils.getSessionMutex(session);\n            synchronized (mutex) {\n                mav = invokeHandlerMethod(request, response, handlerMethod);\n            }\n        }\n        else {\n            // No HttpSession available -> no mutex necessary\n            mav = invokeHandlerMethod(request, response, handlerMethod);\n        }\n    }\n    else {\n        // No synchronization on session demanded at all...\n        // \u8fd9\u91cc\u65f6\u5165\u53e3\n        mav = invokeHandlerMethod(request, response, handlerMethod);\n    }\n\n    if (!response.containsHeader(HEADER_CACHE_CONTROL)) {\n        if (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) {\n            applyCacheSeconds(response, this.cacheSecondsForSessionAttributeHandlers);\n        }\n        else {\n            prepareResponse(response);\n        }\n    }\n\n    return mav;\n}\n\n// RequestMappingHandlerAdapter#invokeHandlerMethod\nprotected ModelAndView invokeHandlerMethod(HttpServletRequest request,\n            HttpServletResponse response, HandlerMethod handlerMethod) throws Exception {\n\n    ServletWebRequest webRequest = new ServletWebRequest(request, response);\n    try {\n        WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);\n        ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);\n\n        ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);\n        if (this.argumentResolvers != null) {\n            invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);\n        }\n        if (this.returnValueHandlers != null) {\n            invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);\n        }\n        invocableMethod.setDataBinderFactory(binderFactory);\n        invocableMethod.setParameterNameDiscoverer(this.parameterNameDiscoverer);\n\n        ModelAndViewContainer mavContainer = new ModelAndViewContainer();\n        mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));\n        modelFactory.initModel(webRequest, mavContainer, invocableMethod);\n        mavContainer.setIgnoreDefaultModelOnRedirect(this.ignoreDefaultModelOnRedirect);\n\n        AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);\n        asyncWebRequest.setTimeout(this.asyncRequestTimeout);\n\n        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n        asyncManager.setTaskExecutor(this.taskExecutor);\n        asyncManager.setAsyncWebRequest(asyncWebRequest);\n        asyncManager.registerCallableInterceptors(this.callableInterceptors);\n        asyncManager.registerDeferredResultInterceptors(this.deferredResultInterceptors);\n\n        if (asyncManager.hasConcurrentResult()) {\n            Object result = asyncManager.getConcurrentResult();\n            mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[0];\n            asyncManager.clearConcurrentResult();\n            LogFormatUtils.traceDebug(logger, traceOn -> {\n                String formatted = LogFormatUtils.formatValue(result, !traceOn);\n                return "Resume with async result [" + formatted + "]";\n            });\n            invocableMethod = invocableMethod.wrapConcurrentResult(result);\n        }\n        // \u6267\u884c\u5bf9\u5e94\u7684\u65b9\u6cd5\n        invocableMethod.invokeAndHandle(webRequest, mavContainer);\n        if (asyncManager.isConcurrentHandlingStarted()) {\n            return null;\n        }\n\n        return getModelAndView(mavContainer, modelFactory, webRequest);\n    }\n    finally {\n        webRequest.requestCompleted();\n    }\n}\n')),(0,a.kt)("p",null,"\u6700\u7ec8\u7684\u65b9\u6cd5\u5b9e\u73b0\uff0c\u901a\u8fc7\u53cd\u5c04\u6267\u884c HanderMethod \u5bf9\u5e94\u7684\u65b9\u6cd5 UserController#list"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// InvocableHandlerMethod#doInvoke\nprotected Object doInvoke(Object... args) throws Exception {\n    Method method = this.getBridgedMethod();\n    ReflectionUtils.makeAccessible(method);\n\n    try {\n        return KotlinDetector.isSuspendingFunction(method) ? CoroutinesUtils.invokeSuspendingFunction(method, this.getBean(), args) : method.invoke(this.getBean(), args);\n    } catch (IllegalArgumentException var5) {\n        this.assertTargetBean(method, this.getBean(), args);\n        String text = var5.getMessage() != null ? var5.getMessage() : "Illegal argument";\n        throw new IllegalStateException(this.formatInvokeError(text, args), var5);\n    } catch (InvocationTargetException var6) {\n        Throwable targetException = var6.getTargetException();\n        if (targetException instanceof RuntimeException) {\n            throw (RuntimeException)targetException;\n        } else if (targetException instanceof Error) {\n            throw (Error)targetException;\n        } else if (targetException instanceof Exception) {\n            throw (Exception)targetException;\n        } else {\n            throw new IllegalStateException(this.formatInvokeError("Invocation failure", args), targetException);\n        }\n    }\n}\n\n')),(0,a.kt)("h3",{id:"\u89c6\u56fe\u6e32\u67d3"},"\u89c6\u56fe\u6e32\u67d3"),(0,a.kt)("p",null,"\u6267\u884cprocessDispatchResult\u65b9\u6cd5\uff0c\u5bf9\u89c6\u56fe\u548cmodel\uff08\u5982\u679c\u6709\u5f02\u5e38\u5219\u5bf9\u5f02\u5e38\u5904\u7406\uff09\u8fdb\u884c\u5904\u7406\uff08\u663e\u7136\u5c31\u662f\u6e32\u67d3\u9875\u9762\u4e86\uff09"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// DispatcherServlet#processDispatchResult\nprivate void processDispatchResult(HttpServletRequest request, HttpServletResponse response,\n        @Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv,\n        @Nullable Exception exception) throws Exception {\n\n    boolean errorView = false;\n\n    if (exception != null) {\n        // \u5f02\u5e38\n        if (exception instanceof ModelAndViewDefiningException) {\n            logger.debug("ModelAndViewDefiningException encountered", exception);\n            mv = ((ModelAndViewDefiningException) exception).getModelAndView();\n        }\n        else {\n            Object handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\n            mv = processHandlerException(request, response, handler, exception);\n            errorView = (mv != null);\n        }\n    }\n\n    // Did the handler return a view to render?\n    if (mv != null && !mv.wasCleared()) {\n        // \u6e32\u67d3\u89c6\u56fe\uff0cmv\u662f\u8fd4\u56de\u7684ModelAndView\u5bf9\u8c61\n        render(mv, request, response);\n        if (errorView) {\n            WebUtils.clearErrorRequestAttributes(request);\n        }\n    }\n    else {\n        if (logger.isTraceEnabled()) {\n            logger.trace("No view rendering, null ModelAndView returned.");\n        }\n    }\n\n    if (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n        // Concurrent handling started during a forward\n        return;\n    }\n\n    if (mappedHandler != null) {\n        // Exception (if any) is already handled..\n        mappedHandler.triggerAfterCompletion(request, response, null);\n    }\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"\u53c2\u8003\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.pdai.tech/md/spring/spring-x-framework-springmvc-source-2.html"},"https://www.pdai.tech/md/spring/spring-x-framework-springmvc-source-2.html"))))}u.isMDXComponent=!0},279:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/20230527223450-7bb3f0a2a0e6c55ca0e05d6c699f7564.png"},27449:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/20230603231631-38e7fb6e15625df1a6134c0d59de5ca3.png"}}]);